<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--	
	마이바티스 참고 사이트
	  - http://blog.mybatis.org/
	  - http://www.mybatis.org/mybatis-3/ko/index.html
	  
	@Mapper 애노테이션이 적용된 인터페이스와 맵퍼 XML파일은
	namespace 속성으로 연결되기 때문에 맵퍼 XML의 namespace를
	지정할 때 @Mapper 애노테이션이 적용된 맵퍼 인터페이스의
	완전한 클래스 이름(패키지를 포함한 이름)을 지정하면 된다.   
-->
<mapper namespace="com.springbootstudy.bbs.mapper.BoardMapper" >

	<!-- 게시글 번호에 해당하는 댓글 리스트를 가져오는 맵핑 구문
		테이블의 컬럼명은 일반적으로 언더스코러 표기법("_")을 사용하는 경우가
		많고 클래스의 인스턴스 맴버는 카멜표기법을 사용한다.
		테이블의 컬럼명과 도메인 클래스의 프로퍼티 이름이 다른 경우 아래와 같이
		SELECT쿼리에 별칭을 사용해 도메인 클래스의 프러퍼티 이름과 동일하게
		맞춰서 조회할 수도 있다.  -->

	<select id="replyList" resultType="Reply">
		SELECT
			no,
			bbs_no AS bbsNo,
			reply_content AS replyContent,
			reply_writer AS replyWriter,
			reg_date AS regDate,
		FROM reply
		WHERE bbs_no = #{no}
			ORDER BY no DESC
		
	</select>


	<!--
		한 페이지에 해당하는 게시글 리스트, 검색리스트를 가져오는 맵핑 구문
		
		BoardMapper 인터페이스에서 아래 맵핑 구문을 호출할 때 @Param("파라미터 이름")
		애노테이션을 사용해 파라미터 이름을 "startRow", "num", "type", "keyword" 
		등으로 설정하여 맵핑 구문을 호출하면 MyBatis가 Map 객체에 담아서 이 맵핑
		구문으로 전달해 준다. 그러므로 parameterType="map"으로 설정하고 SQL 쿼리에서
		데이터로 지정할 때는 Map의 키를 #{startRow}, #{num}, #{keyword}와 같이
		지정하면 된다. 그리고 MyBatis의 태그 안에서 사용할 경우 아래 if문과 같이
		변수 이름을 그대로 사용하면 된다.		
		
		게시글 리스트와 검색 리스트 요청에 따라서 각각을 처리하기 위해 동적으로 
		변화되는 SQL 쿼리를 작성해야 한다. 검색 리스트도 제목, 작성자, 내용을
		기준으로 검색어가 포함된 검색 리스트만 구성하기 위해서 동적으로 변화되는 
		SQL이 필요하므로 각 상황에 맞게 조건절이 동적으로 생성되도록 작성했다.
		
		동적 SQL 참고 : 
		http://www.mybatis.org/mybatis-3/ko/dynamic-sql.html
	-->
	<select id="boardList" parameterType="map" resultType="Board">	
		SELECT 
			no, 
			title, 
			writer, 
			content, 
			reg_date AS regDate,
			read_count AS readCount,
			pass,
			file1 
		FROM springbbs
		<!-- 
			WHERE 절을 동적으로 생성하는 요소
			where 요소는 하위 요소(조건)에서 생성한 내용이 있으면 WHERE 절을
			추가하고 그렇지 않으면 무시한다. 또한 WHERE 다음에 바로 AND나 OR가
			나타나면 그 또한 무시하여 AND나 OR를 지워준다.
			아래는 where 요소의 하위 요소인 if 요소가 true가 되면 SQL문에 WHERE
			절을 추가해 주기 때문에 WHERE를 생략하고 다음 문장부터 추가하였다.
			
			SQL 파라미터로 사용할 데이터가 여러 개라서 BoardMapper 인터페이스에서
			@Param("파라미터 이름") 애노테이션을 사용해 Map 객체로 전달되도록
			하였다. 이렇게 전달된 파라미터를 조건절에서 사용할 때는 #{}를 사용하지
			않고 파라미터 이름만 지정해야 하며 문자열을 사용할 때는 쌍 따옴표("")나
			홑 따옴표('')로 감싸줘야 한다.			
			
			만약 WHERE 절에 수치 데이터의 대소 비교를 하는 부등호가 들어가는 경우라면
			이 부등호는 XML에서 태그로 사용되는 문자이기 때문에 문제가 발생한다. 
			이럴 경우에는 아래와 같이 CDATA Section으로 묶어 주면 된다.
			CDATA는 Character DATA라는 뜻으로 CDATA Section 안에 있는 데이터는
			해석(Parsing)하지 말고 문자 데이터 그대로 처리하라는 의미이다. 이렇게 
			SQL 쿼리문에 XML 태그와 같은 문자를 사용해야 할 경우 아래와 같이 
			CDATA Section 안에 기술되도록 작성해야 한다.
		
			<![CDATA[
				price <= #{price}
			]]>
		-->	
		<where>	
			<if test="type == 'title'">
				title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'writer'">
				writer LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'content'">
				content LIKE CONCAT('%', #{keyword}, '%')
			</if>	
		</where>
		ORDER BY no DESC
		LIMIT #{startRow}, #{num}
	</select>
	
	<!--		
		전체 게시글 수와 검색 리스트에 대한 게시글 수를 반환하는 맵핑 구문	

		게시글 리스트와 검색 리스트 요청에 따라서 페이징 처리에 사용하는 게시글
		수를 반환해야 하기 때문에 아래 상황에 맞게 동적으로 변화되는 SQL 쿼리를
		작성해야 한다. 게시글 리스트 요청일 때는 전체 게시글의 수를 반환되도록
		하고 검색 리스트일 때는 제목, 작성자, 내용을 기준으로 검색어가 포함된
		게시글 수가 반환될 수 있도록 구현해야 한다.
		
		게시글 리스트 요청 : type == null, keyword == null
		게시글 검색 요청 : type == title 일 때 제목으로 검색, 
					type == writer 일 때 글쓴이로 검색, 
					type == content 일 때 게시글 내용으로 검색
		
		동적 SQL 참고 : 
		http://www.mybatis.org/mybatis-3/ko/dynamic-sql.html
		
		BoardMapper 인터페이스에서 이 맵핑 구문을 호출하면서 @Param("파라미터 이름")
		애노테이션을 사용해 파라미터 이름을 "type", "keyword" 등으로 설정해 호출하면
		MyBatis가 파라미터 이름을 키로하여 Map 객체로 만들어 넘겨준다.
				
		아래에서 parameterType="map"을 생략해도 map의 key 값으로
		지정한 이름과 #{}에 지정한 이름이 같은 파라미터에 데이터가 바인딩 된다.
		
		SQL 쿼리 결과가 int형이므로 resultType은 생략이 가능하다.
	-->
	<select id="getBoardCount" parameterType="map" resultType="int">
		SELECT 
			COUNT(no) 
		FROM springbbs
		<!-- 
			WHERE 절을 동적으로 생성하는 요소
			where 요소는 하위 요소(조건)에서 생성한 내용이 있으면 WHERE 절을
			추가하고 그렇지 않으면 무시한다. 또한 WHERE 다음에 바로 AND나 OR가
			나타나면 그 또한 무시하여 AND나 OR를 지워준다.
			아래는 where 요소의 하위 요소인 if 요소가 true가 되면 SQL문에 WHERE
			절을 추가해 주기 때문에 WHERE를 생략하고 다음 문장부터 추가하였다.
			
			조건절에서 DAO로 부터 받은 파라미터를 지정할 때는 #{}를 사용하지 않고
			파라미터 이름만 지정해야 하며 문자열을 사용할 때는 쌍 따옴표("")나
			홑 따옴표('')로 감싸줘야 한다.		
			
			SQL 파라미터로 사용할 데이터가 여러 개라 BoardDao의 getBoardCount()
			메서드에서 이 맵핑 구문을 호출할 때  HashMap에 담아 전달하였다.
			맵핑 구문에서 HashMap의 데이터를 조건절 이나 SQL 파라미터로 지정할 때는
			HashMap에 저장할 때 사용한 키의 이름을 지정하면 된다.
			
			만약 WHERE 절에 수치 데이터의 대소 비교를 하는 부등호가 들어가는 경우라면
			이 부등호는 XML에서 태그로 사용되는 문자이기 때문에 문제가 발생한다. 
			이럴 경우에는 아래와 같이 CDATA Section으로 묶어 주면 된다.
			CDATA는 Character DATA라는 뜻으로 CDATA Section 안에 있는 데이터는
			해석(Parsing)하지 말고 문자 데이터 그대로 처리하라는 의미이다. 이렇게 
			SQL 쿼리문에 XML 태그와 같은 문자를 사용해야 할 경우 아래와 같이 
			CDATA Section 안에 기술되도록 작성해야 한다.    
		
			<![CDATA[
				price <= #{price}
			]]>
		-->	
		<where>	
			<if test="type == 'title'">
				title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'writer'">
				writer LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == 'content'">
				content LIKE CONCAT('%', #{keyword}, '%')
			</if>	
		</where>	
	</select>
	
	<!--
		no에 해당하는 게시글 하나를 가져오는 맵핑 구문
		
		application.properties 파일에 MyBatis 설정을 할 때 다음과 같이 설정 했기	
		때문에 resultType에 패키지를 제외하고 클래스 이름을 지정할 수 있다.
		
		
		mybatis.type-aliases-package=com.springbootstudy.bbs.domain
				
		parameterType은 기본형(int)이므로 생략할 수 있으며 BoardMapper 인터페이스에서
		전달된 파라미터는 #{} 로 감싸서 SQL 쿼리에서 사용할 수 있다. 이 맵핑 구문을
		호출하는 getBoard(int no) 메서드의 파라미터 no를 맵핑 구문의 SQL 쿼리에서
		사용하려면 다음과 같이 #{no}로 사용하면 된다.
	-->
	<select id="getBoard" resultType="Board">
		SELECT 
			* 
		FROM springbbs 
		WHERE no = #{no}
	</select>
	
	<!-- 
		게시글을 테이블에 추가하는 맵핑 구문
			
		아래는 BoardMapper 인터페이스의 insertBoard(Board board) 메서드에서
		호출하는 맵핑 구문으로 parameterType을 Board 타입으로 지정하면 된다.
		아래와 같이 parameterType에 도메인 클래스 타입을 지정하는 경우 VALUES()에 
		지정하는 값은 getter 메서드를 지정하는 것이 아니라 클래스의 프로퍼티만
		(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 준다.
		이 맵핑 구문이 실행되고 반환되는 값은 테이블에 추가된 행의 개수를 정수로
		반환하는데 반환 값이 필요없다면 resultType은 생략할 수 있다.
		
		테이블에 하나의 레코드를 INSERT 할때 자동으로 증가되는 컬럼이나
		Sequence를 사용하는 컬럼의 값을 읽어 와야 할 때도 있다.
		보통 자동 증가되는 컬럼의 값은 데이터가 INSERT 된 후에 읽어오고
		Sequence일 경우 INSERT 이전에 값을 읽어 와야 한다.
		이렇게 INSERT 작업을 하면서 생성된 키의 값을 읽어 와야 할 경우
		아래와 같이 useGeneratedKeys="true"를 지정하고 자동 생성된
		키의 값을 설정할 자바 모델 객체의 프로퍼티 이름을 keyProperty에
		지정하면 Board 객체의 no 프로퍼티에 값을 설정해 준다.	
	-->
	<insert id="insertBoard" parameterType="Board"
		useGeneratedKeys="true" keyProperty="no">
		INSERT INTO springbbs(title, writer, content, 
				reg_date, read_count, pass, file1)
				
			VALUES(#{title}, #{writer}, #{content}, 
				SYSDATE(), #{readCount}, #{pass}, #{file1})
	</insert>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시글의 비밀번호를 가져오는 맵핑 구문
	
		아래는 BoardMapper 인터페이스의 isPassCheck(int no) 메서드에서
		호출하는 맵핑 구문으로 파라미터 no는 기본형이므로 parameterType은 생략할 수
		있으며 SQL 쿼리에서 이 파라미터를 사용하려면 #{no}와 같이 지정하면 된다.
		 
		반환 값이 자바 기본형 또는 String이면 resultType은 생략할 수 있다.
	-->
	<!-- <select id="isPassCheck" resultType="String"> -->
	<select id="isPassCheck">
		SELECT 
			pass
		FROM springbbs
		WHERE no = #{no}
	</select>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시글을 수정하는 맵핑 구문	
		
		아래는 DAO 클래스의 updateBoard(Board board) 메서드에서
		사용하는 맵핑 구문으로 parameterType을 Board 타입으로 지정했다.
		parameterType에 모델 클래스 타입을 지정하는 경우 VALUES()에 
		지정하는 값은 getter 메서드를 지정하는 것이 아니라 클래스의 프로퍼티
		(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 준다.
	-->
	<update id="updateBoard" parameterType="Board">
		UPDATE springbbs 
			SET title = #{title}, content = #{content},
				reg_date = SYSDATE()
		WHERE no = #{no}
	</update>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시글을 삭제하는 맵핑 구문	
		
		아래는 BoardMapper 인터페이스의 deleteBoard(int no) 메서드에서
		사용하는 맵핑 구문으로 parameterType이 int 형이므로 생략했다.		
	-->
	<delete id="deleteBoard">
		DELETE FROM springbbs
		WHERE no = #{no}
	</delete>

	<!--
		게시판 테이블에서 no에 해당하는 게시글 읽은 횟수를 증가시키는 맵핑 구문
	-->
	<update id="incrementReadCount">
		UPDATE springbbs
			SET read_count = read_count + 1
		WHERE no = #{no}
	</update>

</mapper>	



